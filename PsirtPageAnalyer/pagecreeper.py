import requests
import bs4
import html2text
import re
import logging
from requests.exceptions import *
from multiprocessing import Pool
from .models import Vulnerability, BusinessUnit, Product, VulnerabilityPage

class PsirtPageCreeper():
    lenovoSupportHome = 'http://support.lenovo.com'
    severityFlag = 'Severity:'
    cveRep = r'CVE-\d{4}-\d{4}'

    vulCollection = {}


    def clearSpecialChars(inputStr):
        if (inputStr is None):
            return ''
        else:
            # print(inputStr.encode('utf-8'))
            return inputStr.replace('\n', '').replace('\\xa0', '').replace(':', '').strip()


    def extractCVEcode(self, contentText):
        return re.findall(self.cveRep, contentText, re.M | re.I)

    def convertSeverityToInteger(severity):
        if severity == 'High':
            return 1
        elif severity == 'Medium':
            return 2
        else:
            return 3

    def convertStatusToInteger(status):
        if status.replace(' ', '') == 'Notaffected':
            return 0
        elif status == 'Affected':
            return 1
        elif status == 'Researching':
            return 2

    def parseVulRow(self, tableRow):
        tdElems = tableRow.find_all('td')
        strs = list(tdElems[0].strings)
        lenovoCode = self.clearSpecialChars(strs[0])
        description = self.clearSpecialChars(strs[1])

        aElems = tdElems[0].find_all('a')
        link = self.lenovoSupportHome + aElems[0]['href']

        firstDate = self.clearSpecialChars(tdElems[1].string)
        lastDate = self.clearSpecialChars(tdElems[2].string)

        ve = Vulnerability(lenovoCode=lenovoCode, description=description,
                           link=link, firstPublishedDate=firstDate,
                           lastUpdatedDate=lastDate)
        self.vulCollection[lenovoCode] = ve


    def parseVulTable(self, vulTable):
        items = vulTable.find_all('tr')

        # skip the table header line
        for index in range(1, len(items)):
            self.parseVulRow(items[index])


    def parseVulDetail(self, vul, entireVulContent):
        pureTextOfContent = html2text.html2text(entireVulContent.get_text())  # convert to pure text
        startPos = pureTextOfContent.find(self.severityFlag)
        endPos = pureTextOfContent.find(' ', startPos + len(self.severityFlag) + 1)
        severity = pureTextOfContent[startPos + len(self.severityFlag) + 1: endPos]
        vul.severity = self.convertSeverityToInteger(severity)

        cveCodes = self.extractCVEcode(pureTextOfContent)
        vul.cveCodes = repr(cveCodes)
        vul.save()

        vpList = self.parseVulnerabilityPageDetail(vul, entireVulContent)

        # get the product list from each Business Unit
        productsContentBlockList = entireVulContent.find_all('div', id='NewTileListContent')
        for vp in vpList:
            self.parseProductsDetail(vp.bu, vul, productsContentBlockList)


    def parseVulnerabilityPageDetail(vul, content):
        vpList = []
        buAndProdsElem = content.find_all(id='NewTileListComponent')
        if buAndProdsElem is not None and len(buAndProdsElem) > 0:
            for ulElem in buAndProdsElem[0].find_all('ul'):
                for liElem in ulElem.find_all('li'):
                    bu = BusinessUnit(name=liElem.get_text())
                    bu.save()

                    itemIndex = liElem['itemindex']
                    vp = VulnerabilityPage(bu=bu, itemIndex=itemIndex, vul=vul)
                    vp.save()

                    vpList.append(vp)
        return vpList


    def parseProductsDetail(self, bu, vul, productsContentBlockList):
        buProductsBlockList = []
        for productsContentBlock in productsContentBlockList:
            buProductsBlockList = productsContentBlock.find_all('div', itemindex=bu.itemIndex)
            if len(buProductsBlockList) != 0:
                break

        if len(buProductsBlockList) != 0:
            productsTable = buProductsBlockList[0].table
            productRowList = productsTable.find_all('tr')
            if len(productRowList) > 0:
                for index in range(1, len(productRowList)):
                    row = productRowList[index]
                    columns = row.find_all('td')
                    if len(columns) == 2:
                        product = Product(bu = bu, vul=vul, name=columns[0].get_text(),
                                          status=self.convertStatusToInteger(columns[1].get_text()))
                        product.save()
                    elif len(columns) == 4:
                        product = Product(bu=bu, vul=vul, name=columns[0].get_text(),
                                          status = self.convertStatusToInteger(columns[1].get_text()),
                                          fixedVersion = columns[2].get_text(),
                                          downloadLink = columns[3].get_text())
                        product.save()
                    else:
                        pass


    def loadContentPage(url):
        print("loading " + url)

        # try three times to avoid the timeout case
        for i in range(3):
            try:
                response = requests.get(url, timeout=30)
                soup = bs4.BeautifulSoup(response.text)
                content = soup.select('div.content-wrapper')[0]
                return content
            except (ReadTimeout, Timeout, ConnectTimeout):
                print("get a timeout exception")
                continue


    def processDetailPage(self, vul):
        try:
            entireVulContent = self.loadContentPage(vul.link)
            self.parseVulDetail(vul, entireVulContent)
        except Exception:
            logging.exception("arg is %s" % vul.lenovoCode)


    def creep(self):
        homeContent = self.loadContentPage(self.lenovoSupportHome + '/us/en/product_security')
        self.parseVulTable(homeContent.table)

        # go though all vulnerability element
        pool = Pool(16)
        pool.map(self.processDetailPage, self.vulCollection.values())
        pool.close()
        pool.join()
