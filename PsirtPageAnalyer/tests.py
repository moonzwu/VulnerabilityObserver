from unittest import skip
from django.utils import timezone
from django.test import TestCase
from PsirtPageAnalyer.pagecreeper import PsirtPageCreeper
from PsirtPageAnalyer.models import Vulnerability, BusinessUnit, Product, ProdAndVulRelationship, BUAndProdRelationship
from PsirtPageAnalyer.productctrl import ProductCtrl
from PsirtPageAnalyer.buctrl import BusinessUnitCtrl

# Create your tests here.

class PageCreeperTests(TestCase):
    @skip("don't want to test in usual")
    def test_page_creeper_to_creep_all_pages(self):
        creeper = PsirtPageCreeper()
        creeper.creep()
        vuls = Vulnerability.objects.all()
        bus = BusinessUnit.objects.all()
        products = Product.objects.all()
        self.assertEqual(len(vuls), 18)
        self.assertEqual(len(bus), 8)
        self.assertEqual(len(products), 472)

    def createVuls(self, count=1, code=''):
        vuls = []
        for index in range(count):
            randCode = code + str(index)
            v = Vulnerability(lenovoCode=randCode, description='S3 issue', link='https://www.lenovo.com',
                              firstPublishedDate=timezone.now(), lastUpdatedDate=timezone.now(), severity=1,
                              cveCodes='["CVE-021-11"]')
            v.save()
            vuls.append(v)
        return vuls

    def createBUs(self, count=1, name=''):
        bus = []
        for index in range(count):
            randName = name + str(index)
            bu = BusinessUnit(name=randName)
            bu.save()
            bus.append(bu)
        return bus

    def createProducts(self, count=1, name=''):
        products = []
        for index in range(count):
            randName = name + str(index)
            p = Product(name=randName, status=1, fixedVersion='1.0.0', downloadLink='https://www.lenovo.com')
            p.save()
            products.append(p)
        return products

    def setupPVRelationship(self, products, vuls):
        for product in products:
            for vul in vuls:
                pvr = ProdAndVulRelationship(product=product, vul=vul)
                pvr.save()

    def setupBPRelationship(self, bus, products):
        for bu in bus:
            for product in products:
                bpr = BUAndProdRelationship(bu = bu, product=product)
                bpr.save()

    def test_get_product_and_vulnerability_map_by_relationship(self):
        products = self.createProducts(name='RD64')
        vuls = self.createVuls(code='LEN-2015-07')
        pvr = ProdAndVulRelationship(product=products[0], vul=vuls[0])
        pvr.save()

        pvrs = ProdAndVulRelationship.objects.all()
        self.assertEqual(len(pvrs), 1)
        self.assertEqual(pvrs[0].product.name, 'RD640')
        self.assertEqual(pvrs[0].vul.lenovoCode, 'LEN-2015-070')


    def test_get_the_product_and_vulnerabilities_map(self):
        products = self.createProducts(name='RD64')
        vuls = self.createVuls(count=2, code='LEN-2015-07')
        self.setupPVRelationship(products, vuls)

        pc = ProductCtrl()
        pvMap = pc.getTheProductAndVulMap()
        self.assertEqual(pvMap.get('RD640').product.name, 'RD640')
        self.assertEqual(pvMap.get('RD640').product.status, 1)
        self.assertEqual(len(pvMap.get('RD640').vulList), 2)



    def test_get_the_bu_and_products_map(self):
        products = self.createProducts(count=2, name='RD64')
        bus = self.createBUs(name='ThinkServer')
        self.setupBPRelationship(bus, products)
        bc = BusinessUnitCtrl()
        bpMap = bc.getTheBUAndProductMap()

        self.assertEqual(bpMap.get('ThinkServer0').bu.name, 'ThinkServer0')
        self.assertEqual(len(bpMap.get('ThinkServer0').prodList), 2)