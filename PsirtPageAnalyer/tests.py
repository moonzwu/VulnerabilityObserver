from unittest import skip
from django.utils import timezone
from django.test import TestCase
from PsirtPageAnalyer.pagecreeper import PsirtPageCreeper
from PsirtPageAnalyer.models import Vulnerability, BusinessUnit, Product, ProdAndVulRelationship
from PsirtPageAnalyer.productctrl import ProductCtrl

# Create your tests here.

class PageCreeperTests(TestCase):
    @skip("don't want to test in usual")
    def test_page_creeper_to_creep_all_pages(self):
        creeper = PsirtPageCreeper()
        creeper.creep()
        vuls = Vulnerability.objects.all()
        bus = BusinessUnit.objects.all()
        products = Product.objects.all()
        self.assertEqual(len(vuls), 18)
        self.assertEqual(len(bus), 8)
        self.assertEqual(len(products), 472)

    def test_get_product_and_vulnerability_map_by_relationship(self):
        p = Product(name='RD640', status=1, fixedVersion='1.0.0', downloadLink='https://www.lenovo.com')
        p.save()
        v = Vulnerability(lenovoCode='LEN-2015-071', description='S3 issue', link='https://www.lenovo.com',
                      firstPublishedDate=timezone.now(), lastUpdatedDate=timezone.now(), severity=1,
                      cveCodes='["CVE-021-11"]')
        v.save()
        pvr = ProdAndVulRelationship(product=p, vul=v)
        pvr.save()

        pvrs = ProdAndVulRelationship.objects.all()
        self.assertEqual(len(pvrs), 1)
        self.assertEqual(pvrs[0].product.name, 'RD640')
        self.assertEqual(pvrs[0].vul.lenovoCode, 'LEN-2015-071')

    def test_get_the_product_and_vulnerability_map(self):
        p = Product(name='RD640', status=1, fixedVersion='1.0.0', downloadLink='https://www.lenovo.com')
        p.save()
        v1 = Vulnerability(lenovoCode='LEN-2015-071', description='S3 issue', link='https://www.lenovo.com',
                      firstPublishedDate=timezone.now(), lastUpdatedDate=timezone.now(), severity=1,
                      cveCodes='["CVE-021-11"]')
        v1.save()
        v2 = Vulnerability(lenovoCode='LEN-2015-072', description='Poodle issue', link='https://www.lenovo.com',
                           firstPublishedDate=timezone.now(), lastUpdatedDate=timezone.now(), severity=3,
                           cveCodes='["CVE-021-12"]')
        v2.save()
        pvr1 = ProdAndVulRelationship(product=p, vul=v1)
        pvr1.save()
        pvr2 = ProdAndVulRelationship(product=p, vul=v2)
        pvr2.save()

        pc = ProductCtrl()
        pvMap = pc.getTheProductAndVulMap()
        self.assertEqual(pvMap.get('RD640').product.name, 'RD640')
        self.assertEqual(pvMap.get('RD640').product.status, 1)
        self.assertEqual(len(pvMap.get('RD640').vulList), 2)

