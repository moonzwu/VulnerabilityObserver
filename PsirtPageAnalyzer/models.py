import json
import time
from django.db import models
from datetime import *



# Create your models here.
class Vulnerability(models.Model):

    '''
        VulnerabilityElement
        is used to describe the vulnerability of Lenovo monitored
    '''
    lenovoCode = models.CharField(max_length=16, unique=True, db_index=False) # unique key
    description = models.CharField(max_length=255, blank=True)
    link = models.CharField(max_length=512, blank=True)
    firstPublishedDate = models.DateTimeField('first published')
    lastUpdatedDate = models.DateTimeField('last updated')
    severity = models.IntegerField(default=3)
    cveCodes = models.CharField(max_length=512, blank=True)

    def __str__(self):
        return self.lenovoCode

    def to_json(self):
        clsDict = self.__dict__
        d = {}
        for k in clsDict.keys():
            v = clsDict[k]
            if k == '_state':
                continue
            elif k == 'firstPublishedDate' or k == 'lastUpdatedDate':
                d[k] = v.ctime()
            else:
                d[k] = v
        return json.dumps(d)



class BusinessUnit(models.Model):
    '''
        the BusinessUnit class is used to describe the relationship of
        vulnerability and device
    '''
    name = models.CharField(max_length=64, unique=True, db_index=False) # unique key

    def __str__(self):
        return self.name


class Product(models.Model):
    '''
        Product class is used to describe the each product of different BU
    '''
    name = models.CharField(max_length=64, unique=True, db_index=False)
    status = models.IntegerField(default=0)
    fixedVersion = models.CharField(max_length=64, blank=True)
    downloadLink = models.CharField(max_length=512, blank=True)

    def __str__(self):
        return self.name

    def to_json(self):
        return json.dumps(self, default=lambda obj: obj.__dict__)


class ProdAndVulRelationship(models.Model):
    '''
        define the one to many relationship between product and vulnerability
    '''
    product = models.ForeignKey(Product)
    vul = models.ForeignKey(Vulnerability)

    def __str__(self):
        return self.vul.lenovoCode + "_" + self.product.name

class BUAndProdRelationship(models.Model):
    '''
        define the one to many relationship between Business and Products
    '''
    bu = models.ForeignKey(BusinessUnit)
    product = models.ForeignKey(Product)

    def __str__(self):
        return